// Generated using `moon info`, DON'T EDIT IT
package "tonyfettes/cares"

import(
  "tonyfettes/c"
)

// Values
const AI_ADDRCONFIG : Int = 64

const AI_ALL : Int = 32

const AI_CANONNAME : Int = 1

const AI_ENVHOSTS : Int = 256

const AI_NOSORT : Int = 128

const AI_NUMERICHOST : Int = 2

const AI_NUMERICSERV : Int = 8

const AI_PASSIVE : Int = 4

const AI_V4MAPPED : Int = 16

const LIB_INIT_ALL : Int = 1

const LIB_INIT_NONE : Int = 0

const LIB_INIT_WIN32 : Int = 1

const OPT_DOMAINS : Int = 128

const OPT_EDNSPSZ : Int = 32768

const OPT_EVENT_THREAD : Int = 4194304

const OPT_FLAGS : Int = 1

const OPT_HOSTS_FILE : Int = 262144

const OPT_LOOKUPS : Int = 256

const OPT_MAXTIMEOUTMS : Int = 1048576

const OPT_NDOTS : Int = 8

const OPT_NOROTATE : Int = 65536

const OPT_QUERY_CACHE : Int = 2097152

const OPT_RESOLVCONF : Int = 131072

const OPT_ROTATE : Int = 16384

const OPT_SERVERS : Int = 64

const OPT_SERVER_FAILOVER : Int = 8388608

const OPT_SOCK_RCVBUF : Int = 4096

const OPT_SOCK_SNDBUF : Int = 2048

const OPT_SOCK_STATE_CB : Int = 512

const OPT_SORTLIST : Int = 1024

const OPT_TCP_PORT : Int = 32

const OPT_TIMEOUT : Int = 2

const OPT_TIMEOUTMS : Int = 8192

const OPT_TRIES : Int = 4

const OPT_UDP_MAX_QUERIES : Int = 524288

const OPT_UDP_PORT : Int = 16

fn library_cleanup() -> Unit

fn library_init(Int) -> Unit raise E

fn threadsafety() -> Bool

// Errors
pub suberror E {
  NODATA
  FORMERR
  SERVFAIL
  NOTFOUND
  NOTIMP
  REFUSED
  BADQUERY
  BADNAME
  BADFAMILY
  BADRESP
  CONNREFUSED
  TIMEOUT
  EOF
  FILE
  NOMEM
  DESTRUCTION
  BADSTR
  BADFLAGS
  NONAME
  BADHINTS
  NOTINITIALIZED
  LOADIPHLPAPI
  ADDRGETNETWORKPARAMS
  CANCELLED
  SERVICE
  NOSERVER
  Unknown(Int)
}

// Types and methods
type AddrInfo
fn AddrInfo::cnames(Self) -> AddrInfoCname
fn AddrInfo::free(Self) -> Unit
fn AddrInfo::is_null(Self) -> Bool
fn AddrInfo::nodes(Self) -> AddrInfoNode
fn AddrInfo::null() -> Self

type AddrInfoCname
fn AddrInfoCname::alias_(Self) -> @c.Pointer[Byte]
fn AddrInfoCname::is_null(Self) -> Bool
fn AddrInfoCname::name(Self) -> @c.Pointer[Byte]
fn AddrInfoCname::next(Self) -> Self
fn AddrInfoCname::null() -> Self
fn AddrInfoCname::ttl(Self) -> Int

type AddrInfoHints
fn AddrInfoHints::new(flags? : Int, family? : Int, socktype? : Int, protocol? : Int) -> Self

type AddrInfoNode
fn AddrInfoNode::addr(Self) -> @c.Pointer[Byte]
fn AddrInfoNode::addrlen(Self) -> Int
fn AddrInfoNode::family(Self) -> Int
fn AddrInfoNode::is_null(Self) -> Bool
fn AddrInfoNode::next(Self) -> Self
fn AddrInfoNode::null() -> Self
fn AddrInfoNode::protocol(Self) -> Int
fn AddrInfoNode::socktype(Self) -> Int
fn AddrInfoNode::ttl(Self) -> Int

type Channel
fn Channel::destroy(Self) -> Unit
fn Channel::getaddrinfo(Self, Bytes, Bytes, AddrInfoHints, (Int, Int, AddrInfo) -> Unit) -> Unit
fn Channel::is_null(Self) -> Bool
fn Channel::new(Options, Int) -> Self raise E
fn Channel::null() -> Self

pub(all) enum Evsys {
  Default
  Win32
  Epoll
  Kqueue
  Poll
  Select
}

type Options
fn Options::new(evsys~ : Evsys) -> Self

// Type aliases

// Traits

